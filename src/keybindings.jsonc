/*
vscode 的快捷键原则:
    尽量使用默认快捷键
        但由于一些历史原因，或者手指舒适性原因，该改还是得改。
    自定义快捷键时，尽量使用组合键的模式，比如 ctrl+L 开头的全部都是自定义快捷键。
        但如果是使用频率高，并且单次使用会点击多次的，则不要使用组合键的模式。
    自定义的快捷键，应该是经常使用的！
*/
[
    {
        // 将变量名变成 snake_case 风格
        "key": "ctrl+l ctrl+s",
        "command": "editor.action.transformToSnakecase"
    },
    {
        // 将变量名变成 kebab-case 风格
        "key": "ctrl+l ctrl+k",
        "command": "editor.action.transformToKebabcase"
    },
    {
        // 将变量名变为 camelCase 驼峰风格
        "key": "ctrl+l ctrl+c",
        "command": "editor.action.transformToCamelcase"
    },
    {
        // 首字母大写，结合 cameCase 可以实现 PascalCase 风格。
        "key": "ctrl+l ctrl+t",
        "command": "editor.action.transformToTitlecase",
        "when": "editorHasSelection"
    },
    {
        // 切换为大写
        "key": "ctrl+l ctrl+b",
        "command": "editor.action.transformToUppercase"
    },
    {
        // 切换为小写
        "key": "ctrl+l ctrl+m",
        "command": "editor.action.transformToLowercase"
    },
    {
        // 清空 output 输出（需显示 output）
        "key": "ctrl+l ctrl+l",
        "command": "workbench.output.action.clearOutput",
        "when": "workbench.panel.output.active"
    },
    {
        // 多选多行合并为一行
        "key": "ctrl+l ctrl+j",
        "command": "editor.action.joinLines"
    },
    {
        // md 中粘贴时始终粘贴为链接格式，故设置一个新快捷键来让其粘贴为普通文本
        "key": "ctrl+l ctrl+v",
        "command": "editor.action.pasteAs",
        "when": "editorLangId == 'markdown'",
        "args": {
            "id": "text"
        }
    },
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    {
        // 新建标签页（无标题未保存文件）。 原快捷键是 ctrl+n ，但是 ctrl+t 和默认快捷键 ctrl+shift+t 搭配我觉得更合适，因为浏览器也是这样的快捷键。
        "key": "ctrl+t",
        "command": "workbench.action.files.newUntitledFile"
    },
    {
        // 新建文件。 无默认按键，但习惯使用 ctrl+n
        "key": "ctrl+n",
        "command": "explorer.newFile"
    },
    {
        // 与自定义快捷键冲突
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        // 新建文件夹。 同样没有默认按键。
        "key": "alt+n",
        "command": "explorer.newFolder"
    },
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    {
        // 移动光标，到达下一个匹配项。 原快捷键是 ctrl+k ctrl+d ，但因为这个快捷键使用频率很高，
        // 特别是和 ctrl+d 这个默认快捷键一起使用时效果奇佳，所以改为 ctrl+e
        "key": "ctrl+e",
        "command": "editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus" // 有一个默认快捷键也是 ctrl+e 但是我基本没用过，添加 when 能够让我的快捷键优先级高于它。
    },
    {
        // 移动光标，到达上一个匹配项。 与 ctrl+e 成对。
        "key": "ctrl+shift+e",
        "command": "editor.action.moveSelectionToPreviousFindMatch"
    },
    {
        // 选中上一个匹配项。 与默认快捷键 ctrl+d 搭配使用，效果奇佳！
        "key": "ctrl+shift+d",
        "command": "editor.action.addSelectionToPreviousFindMatch"
    },
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    {
        // 删除当前行。 默认快捷键是 ctrl+shift+k ，尝试改回原快捷键，但发现不好用，
        // 因为需要用到两只手，而 ctrl+shift+x 可以直接单手操作，比 k 方便很多。
        "key": "ctrl+shift+x",
        "command": "editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        // 块注释。 oem_2 表示的是 / 按键
        "key": "ctrl+shift+oem_2",
        "command": "editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        // 聚焦到侧边文件栏。oem_3 表示 ` 按键
        "key": "alt+oem_3",
        "command": "workbench.files.action.focusFilesExplorer"
    },
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    {
        // 容易误触，而且“危害性”大
        "key": "ctrl+shift+w",
        "command": "-workbench.action.closeWindow"
    },
]
